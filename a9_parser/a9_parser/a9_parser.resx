<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAEAGACoHAAAFgAAACgAAAAwAAAAYAAAAAEAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAABAAAEAAAGAgMICAwLDRANDhIKDhMLCxEIBgoDAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAKCw4XIzAeQV8jVncpbZUvh7M1k746
        nMhBqtBKstlLstZJmrtGi6I3W28eJS4CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAgASHCgZ
        Q2YeV4MgWIshXIwkZY8ra5Mtc5kzfKE5hqo+kLJDmbhGn71LqslMuNlNwd1SvNtRsss9doYXHSQAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAACAAAPFh8bRGkeVY8dVYkeVIEgVYAkW4UoZYwtbZYweaM1hrA9mr9Eqc1Jq8xLsdBO
        vttPt9ZQtM5QuNJYy+Rr8vt84/ZQhJIMDBMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCAYbQGEeW5sdUoUeUH4eUX4gVYMjXZAkaZgm
        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
</value>
  </data>
</root>